openapi: 3.0.1
info:
  title: Orders API
  description: API to fetch paginated, sorted, and filtered orders.
  version: 1.0.0

paths:
  /api/orders:
    get:
      summary: Get Orders
      description: Fetch paginated orders, sorted by specific columns with optional filtering using a cursor.
      tags:
        - Orders
      parameters:
        - name: cursor
          in: query
          description: The cursor for pagination. Fetches records after the provided ID.
          required: false
          schema:
            type: integer
            example: 10
        - name: limit
          in: query
          description: Number of records to fetch.
          required: true
          schema:
            type: integer
            example: 20
        - name: sort
          in: query
          description: Column name to sort by. Valid values: `id`, `customerName`, `orderAmount`, `status`, `createdAt`.
          required: true
          schema:
            type: string
            example: createdAt
            enum: [id, customerName, orderAmount, status, createdAt]
        - name: sortDirection
          in: query
          description: Sorting direction. Valid values: `asc`, `desc`.
          required: true
          schema:
            type: string
            example: asc
            enum: [asc, desc]
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: The list of fetched orders.
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 101
                        customerName:
                          type: string
                          example: John Doe
                        orderAmount:
                          type: number
                          example: 259.99
                        status:
                          type: string
                          example: Shipped
                        createdAt:
                          type: string
                          format: date-time
                          example: 2024-11-15T10:00:00Z
                  nextCursor:
                    type: integer
                    nullable: true
                    example: 110
                    description: The cursor for the next page of results, or `null` if no more data.
                  totalCount:
                    type: integer
                    example: 500
                    description: Total count of orders.
        '400':
          description: Bad Request - Validation error or invalid query parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid sort column
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Database Error
      x-codeSamples:
        - lang: JavaScript
          label: JavaScript - Fetch
          source: |
            fetch('http://localhost:5000/api/orders?cursor=10&limit=20&sort=createdAt&sortDirection=ASC', {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
              },
            })
            .then(response => response.json())
            .then(data => console.log(data))
            .catch(error => console.error('Error:', error));
